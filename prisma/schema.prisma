// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  BOSS
  BRANCH_ADMIN
}

enum ExamCategory {
  IELTS
  TOEFL
  SAT
  KIDS
  GENERAL_ENGLISH
  MATH
}

enum SectionType {
  READING
  LISTENING
  WRITING
  SPEAKING
  GRAMMAR
  VOCABULARY
}

enum QuestionType {
  MCQ
  TF
  GAP
  ORDER
  DND_MATCH
  SHORT_TEXT
  ESSAY
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          Role      @default(STUDENT)
  approved      Boolean   @default(false)
  branchId      String?
  branch        Branch?   @relation(fields: [branchId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Teacher relations
  classesTeaching   Class[]
  examsCreated      Exam[]
  bookingsAsTeacher Booking[] @relation("TeacherBookings")

  // Student relations
  classEnrollments     ClassStudent[]
  bookingsAsStudent    Booking[]      @relation("StudentBookings")
  assignmentsAsStudent Assignment[]   @relation("AssignmentStudent")
  assignmentsAsTeacher Assignment[]   @relation("AssignmentTeacher")

  // Notifications
  notifications Notification[]

  // Enrollment and Payment relations
  enrollments StudentEnrollment[] @relation("StudentEnrollments")
  payments    PaymentSchedule[]   @relation("StudentPayments")

  // Student Profile relations
  studentProfile   StudentProfile?  @relation("StudentProfileUser")
  studentsTeaching StudentProfile[] @relation("TeacherOfStudent")

  // Tuition Payment relations
  tuitionPayments TuitionPayment[] @relation("StudentTuitionPayments")

  @@map("users")
}

model Branch {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  users           User[]
  classes         Class[]
  bookings        Booking[]
  attempts        Attempt[]
  assignments     Assignment[]
  enrollments     StudentEnrollment[]
  payments        PaymentSchedule[]
  financeTxns     FinanceTxn[]
  studentProfiles StudentProfile[]
  tuitionPayments TuitionPayment[]

  @@map("branches")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())

  classStudents ClassStudent[]
  assignments   Assignment[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([classId, studentId])
  @@map("class_students")
}

model Attempt {
  id           String      @id @default(cuid())
  bookingId    String?     @unique
  booking      Booking?    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  assignmentId String?     @unique
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
  studentId    String
  examId       String
  branchId     String?
  branch       Branch?     @relation(fields: [branchId], references: [id], onDelete: Restrict)
  status       String      @default("IN_PROGRESS") // IN_PROGRESS | SUBMITTED
  startedAt    DateTime?
  submittedAt  DateTime?
  bandOverall  Float?
  createdAt    DateTime    @default(now())

  sections AttemptSection[]

  @@map("attempts")
}

model AttemptSection {
  id         String      @id @default(cuid())
  attemptId  String
  attempt    Attempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  type       SectionType
  answers    Json? // qeyri-avtomatiklərdə raw text; digərlərində struktur cavab
  rawScore   Int?
  maxScore   Int?
  bandScore  Float?
  gradedById String?
  rubric     Json?
  feedback   String?     @db.Text
  startedAt  DateTime?
  endedAt    DateTime?
  status     String      @default("IN_PROGRESS")

  @@map("attempt_sections")
}

model Exam {
  id          String       @id @default(cuid())
  title       String
  category    ExamCategory @default(IELTS)
  track       String? // e.g. "A2" (General English üçün)
  isActive    Boolean      @default(true)
  createdById String?
  createdBy   User?        @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime     @default(now())

  bookings    Booking[]
  sections    ExamSection[]
  questions   Question[]
  unitExams   UnitExam[]
  assignments ExamAssignment[]

  @@map("exams")
}

model Booking {
  id          String        @id @default(cuid())
  studentId   String
  student     User          @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  teacherId   String?
  teacher     User?         @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: SetNull)
  examId      String
  exam        Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  branchId    String?
  branch      Branch?       @relation(fields: [branchId], references: [id], onDelete: Restrict)
  sections    SectionType[]
  startAt     DateTime
  status      String        @default("CONFIRMED")
  reminded24h Boolean       @default(false)
  reminded1h  Boolean       @default(false)
  createdAt   DateTime      @default(now())

  attempt Attempt?

  @@index([studentId, startAt])
  @@index([teacherId, startAt])
  @@map("bookings")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String
  title     String
  body      String
  sentAt    DateTime?
  meta      Json?
  createdAt DateTime  @default(now())

  @@index([userId, createdAt])
  @@map("notifications")
}

model ExamSection {
  id          String      @id @default(cuid())
  examId      String
  exam        Exam        @relation(fields: [examId], references: [id], onDelete: Cascade)
  type        SectionType
  title       String
  durationMin Int         @default(15)
  order       Int

  questions Question[]

  @@map("exam_sections")
}

model Question {
  id          String       @id @default(cuid())
  sectionId   String
  section     ExamSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  qtype       QuestionType
  prompt      Json // {text, passage?, audioUrl?}
  options     Json? // MCQ variants, DND pair pool, ORDER list
  answerKey   Json? // doğru cavab(lar)
  maxScore    Int          @default(1)
  order       Int
  explanation Json? // optional

  tags   QuestionTag[]
  Exam   Exam?         @relation(fields: [examId], references: [id])
  examId String?

  @@map("questions")
}

model BandMap {
  id       String      @id @default(cuid())
  examType String
  section  SectionType
  minRaw   Int
  maxRaw   Int
  band     Float

  @@map("band_maps")
}

model QuestionTag {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        String
  createdAt  DateTime @default(now())

  @@index([tag])
  @@index([questionId])
  @@map("question_tags")
}

// General English catalog
model Track {
  id        String   @id @default(cuid())
  name      String   @unique
  kind      String   @default("GENERAL_ENGLISH")
  createdAt DateTime @default(now())

  books Book[]

  @@map("tracks")
}

model Book {
  id        String   @id @default(cuid())
  title     String
  trackId   String?
  track     Track?   @relation(fields: [trackId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  units Unit[]

  @@map("books")
}

model Unit {
  id        String   @id @default(cuid())
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  title     String
  order     Int
  createdAt DateTime @default(now())

  unitExams UnitExam[]

  @@map("units")
}

model UnitExam {
  id        String   @id @default(cuid())
  unitId    String
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  assignments Assignment[]

  @@map("unit_exams")
}

model Assignment {
  id         String    @id @default(cuid())
  unitExamId String
  unitExam   UnitExam  @relation(fields: [unitExamId], references: [id], onDelete: Cascade)
  studentId  String
  student    User      @relation("AssignmentStudent", fields: [studentId], references: [id], onDelete: Cascade)
  teacherId  String?
  teacher    User?     @relation("AssignmentTeacher", fields: [teacherId], references: [id], onDelete: SetNull)
  classId    String?
  class      Class?    @relation(fields: [classId], references: [id], onDelete: SetNull)
  branchId   String?
  branch     Branch?   @relation(fields: [branchId], references: [id], onDelete: Restrict)
  startAt    DateTime?
  dueAt      DateTime?
  status     String    @default("ASSIGNED")
  createdAt  DateTime  @default(now())

  attempt Attempt?

  @@index([studentId, startAt])
  @@index([teacherId, startAt])
  @@map("assignments")
}

model ExamAssignment {
  id          String        @id @default(cuid())
  studentId   String
  examId      String
  exam        Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  sections    SectionType[] // Which sections to take
  startAt     DateTime?
  dueAt       DateTime?
  createdById String
  branchId    String?
  createdAt   DateTime      @default(now())

  @@index([studentId, examId])
  @@map("exam_assignments")
}

model StudentEnrollment {
  id         String   @id @default(cuid())
  studentId  String
  student    User     @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  courseName String // e.g., "IELTS Preparation", "General English A1"
  courseType String // e.g., "IELTS", "GENERAL_ENGLISH", "TOEFL"
  level      String? // e.g., "A1", "A2", "B1", "B1+", "B2"
  branchId   String?
  branch     Branch?  @relation(fields: [branchId], references: [id], onDelete: Restrict)
  enrolledAt DateTime @default(now())
  status     String   @default("ACTIVE") // ACTIVE, COMPLETED, SUSPENDED, CANCELLED
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  paymentSchedules PaymentSchedule[]

  @@index([studentId, status])
  @@index([branchId, status])
  @@map("student_enrollments")
}

model PaymentSchedule {
  id            String            @id @default(cuid())
  enrollmentId  String
  enrollment    StudentEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  studentId     String
  student       User              @relation("StudentPayments", fields: [studentId], references: [id], onDelete: Cascade)
  amount        Decimal           @db.Decimal(10, 2)
  dueDate       DateTime
  paidDate      DateTime?
  status        String            @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  paymentMethod String? // CASH, CARD, TRANSFER
  notes         String?
  branchId      String?
  branch        Branch?           @relation(fields: [branchId], references: [id], onDelete: Restrict)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([studentId, dueDate])
  @@index([branchId, dueDate])
  @@index([status, dueDate])
  @@map("payment_schedules")
}

model FinanceTxn {
  id         String   @id @default(cuid())
  branchId   String?
  branch     Branch?  @relation(fields: [branchId], references: [id], onDelete: Restrict)
  kind       String // "INCOME" | "EXPENSE"
  category   String // "TUITION" | "EXAM" | "MATERIAL" | "RENT" | "SALARY" | "OTHER"
  amount     Decimal  @db.Decimal(10, 2)
  currency   String   @default("AZN")
  occurredAt DateTime
  meta       Json?
  createdAt  DateTime @default(now())

  @@index([branchId, occurredAt])
  @@index([kind, occurredAt])
  @@index([category, occurredAt])
  @@map("finance_txns")
}

model StudentProfile {
  id            String    @id @default(cuid())
  studentId     String    @unique
  student       User      @relation("StudentProfileUser", fields: [studentId], references: [id], onDelete: Cascade)
  branchId      String
  branch        Branch    @relation(fields: [branchId], references: [id], onDelete: Restrict)
  teacherId     String?
  teacher       User?     @relation("TeacherOfStudent", fields: [teacherId], references: [id], onDelete: SetNull)
  firstEnrollAt DateTime?
  monthlyFee    Decimal?  @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([branchId])
  @@index([teacherId])
  @@map("student_profiles")
}

model TuitionPayment {
  id        String        @id @default(cuid())
  studentId String
  student   User          @relation("StudentTuitionPayments", fields: [studentId], references: [id], onDelete: Cascade)
  branchId  String
  branch    Branch        @relation(fields: [branchId], references: [id], onDelete: Restrict)
  year      Int
  month     Int // 1..12
  amount    Decimal       @db.Decimal(10, 2)
  status    PaymentStatus @default(UNPAID)
  paidAt    DateTime?
  note      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([studentId, year, month])
  @@index([branchId, year, month])
  @@index([status, year, month])
  @@map("tuition_payments")
}
