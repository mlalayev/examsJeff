// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum SectionType {
  READING
  LISTENING
  WRITING
  SPEAKING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  // Teacher relations
  classesTeaching  Class[]
  examsCreated     Exam[]
  bookingsAsTeacher Booking[] @relation("TeacherBookings")
  
  // Student relations
  classEnrollments ClassStudent[]
  attempts         Attempt[]
  bookingsAsStudent Booking[] @relation("StudentBookings")
  
  // Notifications
  notifications    Notification[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  classStudents ClassStudent[]
  
  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([classId, studentId])
  @@map("class_students")
}

model Attempt {
  id          String   @id @default(cuid())
  studentId   String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId      String?
  status      String
  bandOverall Float?
  createdAt   DateTime @default(now())
  
  @@map("attempts")
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  isActive    Boolean  @default(true)
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  
  bookings    Booking[]
  
  @@map("exams")
}

model Booking {
  id          String        @id @default(cuid())
  studentId   String
  student     User          @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  teacherId   String?
  teacher     User?         @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: SetNull)
  examId      String
  exam        Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  sections    SectionType[]
  startAt     DateTime
  status      String        @default("CONFIRMED")
  reminded24h Boolean       @default(false)
  reminded1h  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  
  @@index([studentId, startAt])
  @@index([teacherId, startAt])
  @@map("bookings")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String
  title     String
  body      String
  sentAt    DateTime?
  meta      Json?
  createdAt DateTime  @default(now())
  
  @@index([userId, createdAt])
  @@map("notifications")
}
